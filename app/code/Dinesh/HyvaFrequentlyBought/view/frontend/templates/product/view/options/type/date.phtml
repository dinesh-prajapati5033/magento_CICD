<?php

/**
 * @category Dinesh HyvaFrequentlyBought
 * @package Dinesh_HyvaFrequentlyBought
 * @copyright Copyright (c) 2023 Dinesh
 * @author Dinesh Team <info@dinesh.com>
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Dinesh\HyvaFrequentlyBought\ViewModel\CustomOption;
use Hyva\Theme\ViewModel\ProductPrice;
use Magento\Catalog\Api\Data\ProductCustomOptionInterface;
use Magento\Catalog\Block\Product\View\Options\Type\Date;
use Magento\Catalog\Pricing\Price\CustomOptionPrice;
use Magento\Framework\Escaper;

/** @var Escaper $escaper */
/** @var Date $block */
/** @var ProductPrice $productPriceViewModel */
/** @var ViewModelRegistry $viewModels */
$productPriceViewModel = $viewModels->require(ProductPrice::class);
$customOptionViewModel = $viewModels->require(CustomOption::class);
$product = $block->getProduct();
$productId = $product->getId();
$option = $block->getOption();
$optionId = $escaper->escapeHtmlAttr($option->getId());
$class = $option->getIsRequire() ? ' required' : '';
$fieldName = 'options_' . ((int) $optionId) . '_' . $option->getType();

if ($productPriceViewModel->displayPriceInclAndExclTax()) {
    $basePrice = $productPriceViewModel
    ->getCustomOptionPriceExclTax($option, CustomOptionPrice::PRICE_CODE, $block->getProduct());
}

$htmlInputTypes = [
    ProductCustomOptionInterface::OPTION_TYPE_DATE_TIME => 'datetime-local',
    ProductCustomOptionInterface::OPTION_TYPE_DATE => 'date',
    ProductCustomOptionInterface::OPTION_TYPE_TIME => 'time',
];
/*
 * Legacy select based date-time picker implementation.
 *
 * At the time of writing, the HTML date, time and datetime-local input elements do not yet have enough browser support.
 * https://caniuse.com/input-datetime
 *
 * Therefore, currently, the dates are rendered using the plain select inputs
 * An alternative implementation is provided in the date-html5.phtml template.
 */
?>
<div class="flex flex-col sm:flex-row border-t border-gray-300 py-2
     last:mb-6 last:border-b w-full items-center flex-wrap">
    <label class="label text-gray-700 text-left w-full"
           for="options_<?= $escaper->escapeHtmlAttr($optionId) ?>"
           x-html="updateOptionPrice('<?= $escaper->escapeJs($optionId) ?>', $el)"
    >
        <span><?= $escaper->escapeHtml($option->getTitle()) ?></span>
        <?php if ($option->getIsRequire()): ?>
            <span class="sup text-sm">*</span>
        <?php endif; ?>
        <span><?= /* @noEscape */ $block->getFormattedPrice() ?></span>
    </label>

    <div class="flex flex-wrap gap-y-2 text-gray-900 text-left w-full">
        <?php if ($option->getType() == ProductCustomOptionInterface::OPTION_TYPE_DATE_TIME
            || $option->getType() == ProductCustomOptionInterface::OPTION_TYPE_DATE): ?>
                  <?= $customOptionViewModel->getDateDropdownsHtml((int) $optionId, [
                    'day' => ['class="form-select w-2/4"'],
                    'month' => ['class="form-select w-2/4"'],
                    'year' => ['class="form-select mt-2 w-full"'],
            ]) ?>
        <?php endif; ?>

        <?php if ($option->getType() == ProductCustomOptionInterface::OPTION_TYPE_DATE_TIME
            || $option->getType() == ProductCustomOptionInterface::OPTION_TYPE_TIME): ?>
            <?= $customOptionViewModel->getTimeDropdownsHtml((int) $optionId, [
                'hour' => ['class="form-select w-2/4"'],
                'minute' => ['class="form-select w-2/4"'],
                'day_part' => ['class="form-select w-2/4"'],
            ]) ?>
        <?php endif; ?>
        <script>
            function updatePriceForDateOption_<?= (int) $optionId ?>(next) {
                const input = document.createElement('input');
                input.type = 'text';
                input.id = 'options_<?= (int) $optionId ?>';
                input.name = '<?= $escaper->escapeJs($fieldName) ?>';
                input.value = ['month', 'day', 'year', 'hour', 'minute'].map(part => {
                    const input = document.getElementById(`options_<?= (int) $optionId ?>_${part}`);
                        return input ? input.value : '';
                    }).join('');
                next('<?= $escaper->escapeJs($optionId) ?>', input)
            }
            (() => {
                const parts = ['month', 'day', 'year', 'hour', 'minute', 'day_part'];
                const baseId = `options_<?= (int) $optionId ?>`;
                parts.forEach(part => {
                    const select = document.getElementById(`${baseId}_${part}`);
                    if (select) {
                        select.setAttribute('x-on:change',
                        `updatePriceForDateOption_<?= (int) $optionId ?>((optionId, input) => {
                            updateCustomOptionValue($dispatch, optionId, input,
                            '<?= $escaper->escapeHtmlAttr($productId) ?>')
                        })`)
                    }
                })
            })()
        </script>
    </div>
</div>
