<?php
/**
 * @category Mageants HyvaFrequentlyBought
 * @package Mageants_HyvaFrequentlyBought
 * @copyright Copyright (c) 2023 Mageants
 * @author Mageants Team <info@mageants.com>
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\ProductPage;
use Hyva\Theme\ViewModel\ProductPrice;
use Magento\Catalog\Block\Product\View;
use Magento\Catalog\Model\Product;
use Magento\Catalog\Pricing\Price\FinalPrice;
use Magento\Catalog\Pricing\Price\RegularPrice;
use Magento\Catalog\Pricing\Price\TierPrice;
use Magento\Framework\Escaper;

/** @var View $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */
/** @var Product $product */
$product = $block->getData('product');
$pid = $product->getId();
/** @var ProductPrice $productPriceViewModel */
$productPriceViewModel = $viewModels->require(ProductPrice::class);

/** @var ProductPage $productViewModel */
$productViewModel = $viewModels->require(ProductPage::class);

$regularPrice = $productPriceViewModel->getPriceValue(RegularPrice::PRICE_CODE, $product);
$finalPrice = $productPriceViewModel->getPriceValue(FinalPrice::PRICE_CODE, $product);
$tierPrices = $productPriceViewModel->getTierPrices(TierPrice::PRICE_CODE, $product);

if ($productPriceViewModel->displayPriceInclAndExclTax()) {
    $finalPriceExclTax = $productPriceViewModel
    ->getPriceValueExclTax(FinalPrice::PRICE_CODE, $product);
}

$displayTax = $productPriceViewModel->displayPriceIncludingTax();

?>
<script>
    function initPrice<?= (int)$product->getId() ?>() {

        return {
            activeProductsPriceData: false,
            initialFinalPrice: <?= (float)$finalPrice ?>,
            initialTierPrices: <?= /** @noEscape */ json_encode($tierPrices) ?>,
            calculatedFinalPrice: false,
            calculatedFinalPriceWithCustomOptions: false,
            customOptionPrices: [],
            activeCustomOptions: [],
            <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
            initialBasePrice: <?= (float)$finalPriceExclTax ?>,
            calculatedBasePrice: false,
            customOptionBasePrices: [],
            calculatedBasePriceWithCustomOptions: false,
            <?php endif; ?>
            qty: 1,
            updateCustomOptionActive(data) {
                currentProductId = <?= /** @noEscape */ $pid; ?>;
                if(currentProductId !== data.productId){
                    return;
                }
                let activeCustomOptions = this.activeCustomOptions;
                const customOptionId = data.customOptionId;

                if (data.active) {
                    if (!activeCustomOptions.includes(customOptionId)) {
                        activeCustomOptions.push(data.customOptionId);
                    }
                } else {
                    if (customOptionId && activeCustomOptions.includes(customOptionId)) {
                        let index = activeCustomOptions.indexOf(customOptionId);
                        activeCustomOptions.splice(index, 1);
                    }
                }
                this.calculateFinalPriceWithCustomOptions()
            },
            updateCustomOptionPrices(prices, basePrices) {
                if (prices) {
                    this.customOptionPrices = prices;
                }

                <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
                if (basePrices) {
                    this.customOptionBasePrices = basePrices;
                }
                <?php endif; ?>

                this.calculateFinalPriceWithCustomOptions();
            },
            calculateFinalPrice() {
                const calcPrice = (initialPrice, withTax) => {
                    let price;
                    if (this.activeProductsPriceData) {
                        const key = withTax ? 'finalPrice' : 'basePrice';
                        price = this.initialTierPrices.reduce((finalValue, tierPrice) => {
                            if (this.qty >= tierPrice.price_qty) {
                                return (this.activeProductsPriceDat[key] *
                                    (1 + (tierPrice.percentage_value / 100)) < finalValue)
                                    ? this.activeProductsPriceData[key] *
                                    (1 + (tierPrice.percentage_value / 100))
                                    : finalValue;
                            }
                            return finalValue;
                        }, this.activeProductsPriceData[key] || initialPrice);
                    }
                    return price;
                }
                const finalPrice = this.activeProductsPriceData &&
                this.activeProductsPriceData.finalPrice || this.initialFinalPrice;
                this.calculatedFinalPrice = calcPrice(finalPrice, <?= $displayTax ? 'true' : 'false' ?>);

                window.dispatchEvent(new CustomEvent("update-product-final-price", 
                {detail: this.calculatedFinalPrice}));

                <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
                const basePrice = this.activeProductsPriceData
                && this.activeProductsPriceData.basePrice || this.initialBasePrice;
                this.calculatedBasePrice = calcPrice(basePrice, false);

                window.dispatchEvent(new CustomEvent("update-product-base-price", {detail: this.calculatedBasePrice}));
                <?php endif; ?>
            },
            calculateFinalPriceWithCustomOptions() {
                let finalPrice = this.calculatedFinalPrice || this.initialFinalPrice;

                this.calculatedFinalPriceWithCustomOptions =
                    this.activeCustomOptions.reduce((priceAccumulator, activeCustomOptionId) => {
                        const customOptionPrice = this.customOptionPrices[activeCustomOptionId];
                        if (customOptionPrice) {
                            return Number.parseFloat(priceAccumulator) + Number.parseFloat(customOptionPrice);
                        }
                        return finalPrice;
                    }, finalPrice);

                <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
                const basePrice = this.calculatedBasePrice || this.initialBasePrice; // ??? unfinished
                //this.calculatedBasePriceWithCustomOptions = basePrice +this.getCustomOptionBasePrice();
                <?php endif; ?>
                checkboxElement = document.getElementById('mageants-prd-fbt-checkbox-<?= (int)$product->getId() ?>');
                if(checkboxElement){
                    total =this.calculatedFinalPriceWithCustomOptions ||
                    this.calculatedFinalPrice ||
                    this.initialFinalPrice;
                    checkboxElement.setAttribute('data-price-amount', total);
                    window.dispatchEvent(new CustomEvent('update-fbt-total-price', { detail: { totalPrice: total } }));
                }
            },
            getFormattedFinalPrice() {
                return hyva.formatPrice(
                    this.calculatedFinalPriceWithCustomOptions ||
                    this.calculatedFinalPrice ||
                    this.initialFinalPrice
                )
            },
            <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
            getFormattedBasePrice() {
                return hyva.formatPrice(
                    this.calculatedBasePriceWithCustomOptions ||
                    this.calculatedBasePrice ||
                    this.initialBasePrice
                )
            },
            <?php endif; ?>
            eventListeners: {
                ['@update-bundle-option-prices.window'](event) {
                    this.activeProductsPriceData = event.detail;

                    this.calculateFinalPrice();
                    this.calculateFinalPriceWithCustomOptions();
                },
                ['@update-qty-<?= (int)$product->getId() ?>.window'](event) {
                    this.qty = event.detail;

                    this.calculateFinalPrice();
                    this.calculateFinalPriceWithCustomOptions();
                },
                ['@update-custom-option-active.window'](event) {
                    this.updateCustomOptionActive(event.detail);
                },
                ['@update-custom-option-prices.window'](event) {
                    this.updateCustomOptionPrices(event.detail);
                },
                <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
                ['@update-custom-option-base-prices.window'](event) {
                    this.updateCustomOptionPrices(null, event.detail);
                }
                <?php endif; ?>
            }
        }
    }
</script>
<div x-data="initPrice<?= (int)$product->getId() ?>()"
     x-bind="eventListeners"
     class="price-box price-final_price"
>
    <div class="final-price flex">
        <span id="product-price-<?= (int)$product->getId() ?>"
              class="price-wrapper title-font font-medium text-gray-900"
              aria-live="assertive"
              aria-atomic="true"
        >
            <span class="sr-only">
                <?= $escaper->escapeHtml(__('Final product price ')) ?>
            </span>
            <span
                class="price"
                x-html="getFormattedFinalPrice()"
            ></span>
        </span>
    </div>
    <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
        <div class="final-price-excl-tax">
            <span class="font-regular text-gray-900">
                <span><?= $escaper->escapeHtml(__('Excl. Tax')) ?>:</span>
                <span class="price" x-html="getFormattedBasePrice()">
                    <?= /** @noEscape */ $productViewModel->format($finalPriceExclTax) ?>
                </span>
            </span>
        </div>
    <?php endif; ?>
</div>
